@page "/bucket_game"

<p>
    <button @onclick="bucketMoveAsync">Bucket</button> 
    <button @onclick="playerMoveAsync">Player</button> 
    <button @onclick="stop">Stop</button>
</p>

<div id="myGameArea">
    <div id="winningPlayer">
        @if(players.Count > 0) {
            @if (@winningPlayer.PlayerId != "default") {
                @if(@running) {
                    <p>WINNING: @winningPlayer.PlayerId | Score: @winningPlayer.PlayerScore</p>
                }
                @if(!@running)
                {
                    <p>WINNER: @winningPlayer.PlayerId | Score: @winningPlayer.PlayerScore</p>
                }
            }
        }
    </div>
    <div id="myGoalLine"></div>
    <div id ="myBucket" style=@bucketStyle></div>
    @if(players.Count > 0) {
        @foreach(var player in players)
        {
            <div id="myPlayer" style=@player.PlayerStyle>
                <p id="myPlayerText">@player.PlayerId</p>
            </div>
        }
    }
</div>
<div id="myScoreBoard">
        <table>
            <tr>
                <th>PlayerId</th>
                <th>PlayerScored</th>
                <th>PlayerScore</th>
            </tr>
        @if(players.Count > 0) {
            @foreach(var player in players)
            {
                <tr>
                    <td>@player.PlayerId</td>
                    <td>@player.PlayerScored</td>
                    <td>@player.PlayerScore</td>
                </tr>
            }
        }
        </table>
</div>

@code {
    int bucketPos {get; set;}
    int increment {get; set;}
    int timer {get; set;}
    string bucketStyle {get; set;}
    bool decreasing {get; set;}
    bool running {get; set;}
    PlayerStuff winningPlayer {get; set;}
    List<PlayerStuff> players {get; set;}

    protected override async Task OnInitializedAsync()
    {
        timer = 600;
        increment = 5;
        bucketPos = 0;
        bucketStyle = "bottom: 0; left: 0;";
        winningPlayer = new PlayerStuff("default");
        players = new List<PlayerStuff>();
        await Task.Delay(0);
    }
    public async Task bucketMoveAsync() {
        running = true;
        var i = 0;
        for (i=0; i <= timer; i++)
        {
            if(!running) 
            {
                break;
            }
            bucketStyle = string.Empty;
            bucketPos = calculateBucketMove(bucketPos);
            bucketStyle = "bottom: 0; left: " + bucketPos + "px;";
            StateHasChanged();
            await Task.Delay(30);
        }
        running = false;
        calculateWinner();

    }
    public async Task playerMoveAsync() {
        PlayerStuff myPlayer = new PlayerStuff();
        players.Add(myPlayer);
        var i = 0;
        for (i=0; i <= timer; i++)
        {
            if(!myPlayer.PlayerFalling || !running) 
            {
                break;
            }
            if (players.Count > 0) {
                if (!myPlayer.PlayerScored) {
                    checkCollision(myPlayer);
                    calculateWinner();

                }
                if (myPlayer.PlayerScored) {
                    myPlayer.PlayerStyle = "top: " + (400 - 48) + "px; left: " + ((bucketPos - 13) + myPlayer.PlayerScoredposOffset) + "px;";
                }
                else 
                {
                    myPlayer.PlayerStyle = string.Empty;
                    calculatePlayerMove(myPlayer);
                    myPlayer.PlayerStyle = "top: " + myPlayer.POSY + "px; left: " + myPlayer.POSX + "px;";
                }
                StateHasChanged();
                await Task.Delay(30);
            }
        }
    }
    private void calculatePlayerMove(PlayerStuff myPlayer) {
        myPlayer.POSY = myPlayer.POSY + (myPlayer.Speed / 2);

        if (!myPlayer.PlayerFallingForward)
        {
            myPlayer.POSX = myPlayer.POSX - myPlayer.Speed;
        } 
        else
        {
            myPlayer.POSX = myPlayer.POSX + myPlayer.Speed;
        }
        if (myPlayer.POSX <= 0)
        {
            myPlayer.PlayerFallingForward = true;

        } 
        else if (myPlayer.POSX >= 375)
        {
            myPlayer.PlayerFallingForward = false;
        }
        if (myPlayer.POSY >= 375)
        {
            myPlayer.PlayerFalling = false;
        }
    }

    private int calculateBucketMove(int startingPOS) {
        if(startingPOS >= 350 && !decreasing) 
        {
            decreasing = true;
        }
        else if (startingPOS <= 0 && decreasing) 
        {
            decreasing = false;
        }
        if (decreasing) {
            return startingPOS - increment;
        }
        return startingPOS + increment;
    }
    private void stop() {
        running = false;
        players = new List<PlayerStuff>();
    }

    private void checkCollision(PlayerStuff myPlayer) {
        var i = 0;
        for(i=0; i <= 50; i++) 
        {
            if (myPlayer.POSY + 25 >= 375 && myPlayer.POSY + 25 <= 380) 
            {
                // Check if in contact with bucket
                if (myPlayer.POSX + 13 == bucketPos + i)
                {
                    myPlayer.PlayerScoredposOffset = i;
                    myPlayer.PlayerScored = true;
                    calculatePlayerScore(myPlayer);
                    break;
                } 
            }
        }
    }
    private void calculatePlayerScore(PlayerStuff myPlayer) {
        var bucketCenter = 26;
        var scorePercent = 0.00f;
        if (myPlayer.PlayerScoredposOffset == 26) {
            // perfect score
            myPlayer.PlayerScore = 100;
        } 
        else if (myPlayer.PlayerScoredposOffset < 26)
        {
            scorePercent = (51.00f - (bucketCenter - myPlayer.PlayerScoredposOffset))/51.00f;
            myPlayer.PlayerScore = (int)(scorePercent * 100.00f);
        } 
        else
        {
            scorePercent = (51.00f - (myPlayer.PlayerScoredposOffset - bucketCenter))/51.00f;
            myPlayer.PlayerScore = (int)(scorePercent * 100.00f);
        }
    }
    private void calculateWinner() 
    {
        if (players.Count > 0) {
            players.ForEach(delegate(PlayerStuff player)
            {
                if(player.PlayerScored)
                {
                    if (winningPlayer.PlayerId == "default")
                    {
                        winningPlayer = player;
                    }
                    else 
                    {
                        if (winningPlayer.PlayerScore < player.PlayerScore)
                        {
                            winningPlayer = player;
                        }
                    }
                }
            });

        }
    }
    public class PlayerStuff
    {
        public int POSX {get; set;}
        public int POSY {get; set;}
        public int Speed {get; set;}
        public int PlayerScore {get; set;}
        public int PlayerScoredposOffset {get; set;}
        public bool PlayerFalling {get; set;}
        public bool PlayerFallingForward {get; set;}
        public bool PlayerScored {get; set;}

        public string PlayerStyle {get; set;}
        public string PlayerId {get; set;}
        
        public PlayerStuff()
        {
            Random random = new Random();
            PlayerId = "Player" + random.Next(1, 50);
            POSX = random.Next(0, 375);
            POSY = 0;
            Speed = random.Next(3,10);
            PlayerFalling = true;
            PlayerFallingForward = true;
            PlayerScore = 0;
            PlayerScored = false;
            PlayerStyle = "top: 0; left: " + POSX;
        }
        public PlayerStuff(string name)
        {
            Random random = new Random();
            PlayerId = name;
            POSX = random.Next(0, 375);
            POSY = 0;
            Speed = random.Next(3,10);
            PlayerFalling = true;
            PlayerFallingForward = true;
            PlayerScore = 0;
            PlayerScored = false;
            PlayerStyle = "top: 0; left: " + POSX;
        }
    }
}